[PHP-Directory-Structure]
	Example 2-1. PHP 4 package structure
		c:\php
		|
		+--cli
		|  |
		|  |-php.exe           -- CLI executable - ONLY for command line scripting
		|
		+--dlls                -- support DLLs required by some extensions
		|  |
		|  |-expat.dll
		|  |
		|  |-fdftk.dll
		|  |
		|  |-...
		|
		+--extensions          -- extension DLLs for PHP
		|  |
		|  |-php_bz2.dll
		|  |
		|  |-php_cpdf.dll
		|  |
		|  |-..
		|
		+--mibs                -- support files for SNMP
		|
		+--openssl             -- support files for Openssl
		|
		+--pdf-related         -- support files for PDF
		|
		+--sapi                -- SAPI (server module support) DLLs
		|  |
		|  |-php4apache.dll
		|  |
		|  |-php4apache2.dll
		|  |
		|  |-..
		|
		+--PEAR                -- initial copy of PEAR
		|
		|
		|-go-pear.bat          -- PEAR setup script
		|
		|-..
		|
		|-php.exe              -- CGI executable
		|
		|-..
		|
		|-php.ini-dist         -- default php.ini settings
		|
		|-php.ini-recommended  -- recommended php.ini settings
		|
		|-php4ts.dll           -- core PHP DLL
		|
		|-...

	Or:
	Example 2-2. PHP 5 package structure
		c:\php
		|
		+--dev
		|  |
		|  |-php5ts.lib
		|
		+--ext                 -- extension DLLs for PHP
		|  |
		|  |-php_bz2.dll
		|  |
		|  |-php_cpdf.dll
		|  |
		|  |-..
		|
		+--extras
		|  |
		|  +--mibs             -- support files for SNMP
		|  |
		|  +--openssl          -- support files for Openssl
		|  |
		|  +--pdf-related      -- support files for PDF
		|  |
		|  |-mime.magic
		|
		+--pear                -- initial copy of PEAR
		|
		|
		|-go-pear.bat          -- PEAR setup script
		|
		|-fdftk.dll
		|
		|-..
		|
		|-php-cgi.exe          -- CGI executable
		|
		|-php-win.exe          -- executes scripts without an opened command prompt
		|
		|-php.exe              -- CLI executable - ONLY for command line scripting
		|
		|-..
		|
		|-php.ini-dist         -- default php.ini settings
		|
		|-php.ini-recommended  -- recommended php.ini settings
		|
		|-php5activescript.dll
		|
		|-php5apache.dll
		|
		|-php5apache2.dll
		|
		|-..
		|
		|-php5ts.dll           -- core PHP DLL
		|
		|-...
	Here is a list of server modules shipped with PHP 4 and PHP 5:

     * sapi/php4activescript.dll (php5activescript.dll) - ActiveScript
       engine, allowing you to embed PHP in your Windows applications.
     * sapi/php4apache.dll (php5apache.dll) - Apache 1.3.x module.
     * sapi/php4apache2.dll (php5apache2.dll) - Apache 2.0.x module.
     * sapi/php5apache2_2.dll - Apache 2.2.x module.
     * sapi/php4isapi.dll (php5isapi.dll) - ISAPI Module for ISAPI
       compliant web servers like IIS 4.0/PWS 4.0 or newer.
     * sapi/php4nsapi.dll (php5nsapi.dll) - Sun/iPlanet/Netscape server
       module.
     * sapi/php4pi3web.dll (no equivalent in PHP 5) - Pi3Web server
       module.

[PHP-Use-For]
* Websites and web applications (server-side scripting)
	you have two choices(server module or CGI)
	for the method of connecting PHP to the server. For many
	servers PHP has a direct module interface (also called SAPI). These
	servers include Apache, Microsoft Internet Information Server, Netscape
	and iPlanet servers. Many other servers have support for ISAPI, the
	Microsoft module interface (OmniHTTPd for example). If PHP has no
	module support for your web server, you can always use it as a CGI or
	FastCGI processor. This means you set up your server to use the CGI
	executable of PHP to process all PHP file requests on the server.
	Notice:Server modules provide significantly better performance and additional
		   functionality compared to the CGI binary.
* Command line scripting
	In this case, you need no server and no browser.
	(e.g.write scripts autogenerating some images for you offline, or processing
	text files depending on some arguments you pass to them)
* Desktop (GUI) applications
	With PHP you can also write desktop GUI applications using the PHP-GTK
	extension. This is a completely different approach than writing web
	pages, as you do not output any HTML, but manage Windows and objects
	within them. For more information about PHP-GTK, please visit the site
	dedicated to this extension. PHP-GTK is not included in the official
	PHP distribution.

[PHP-Install-Method]
!!!Warning
	There are several all-in-one installers over the Internet, but none of
	those are endorsed by PHP.net, as we believe that the manual
	installation is the best choice to have your system secure and
	optimised.
*windows-installers
	The Windows PHP installer for later versions of PHP is built using MSI
	technology using the Wix Toolkit (http://wix.sourceforge.net/). It will
	install and configure PHP and all the built-in and PECL extensions, as
	well as configure many of the popular web servers such as IIS, Apache,
	and Xitami.
	!!!Warning
		It is not recommended to install all extensions by default, since many
		other them require dependencies from outside PHP in order to function
		properly. Instead, use the Installation Repair Mode that can be
		triggered thru the 'Add/Remove Programs' control panel to enable or
		disable extensions and features after installation.
*Manually-Install
	Upgrading from a previous PHP version: Previous editions of the
	manual suggest moving various ini and DLL files into your SYSTEM
	(i.e. C:\WINDOWS) folder and while this simplifies the installation
	procedure it makes upgrading difficult. We advise you remove all of
	these files (like php.ini and PHP related DLLs from the Windows
	SYSTEM folder) before moving on with a new PHP installation. Be sure
	to backup these files as you might break the entire system. The old
	php.ini might be useful in setting up the new PHP as well. And as
	you'll soon learn, the preferred method for installing PHP is to
	keep all PHP related files in one directory and have this directory
	available to your systems PATH.
	
	MDAC requirements: If you use Microsoft Windows 98/NT4 download the
	latest version of the Microsoft Data Access Components (MDAC) for
	your platform. MDAC is available at http://msdn.microsoft.com/data/.
	This requirement exists because ODBC is built into the distributed
	Windows binaries.
	Extract the distribution file into a directory of your choice. If you
	are installing PHP 4, extract to C:\, as the zip file expands to a
	foldername like php-4.3.7-Win32. If you are installing PHP 5, extract
	to C:\php as the zip file doesn't expand as in PHP 4. You may choose a
	different location but do not have spaces in the path (like C:\Program
	Files\PHP) as some web servers will crash if you do.
	
	Extract the distribution file into a directory of your choice. If you
	are installing PHP 4, extract to C:\, as the zip file expands to a
	foldername like php-4.3.7-Win32. If you are installing PHP 5, extract
	to C:\php as the zip file doesn't expand as in PHP 4. You may choose a
	different location but do not have spaces in the path (like C:\Program
	Files\PHP) as some web servers will crash if you do.

[PHP-Set-DLL-Path]
   The CGI and CLI binaries, and the web server modules all require the
   php4ts.dll (php5ts.dll) file to be available to them. 
   To make php4ts.dll / php5ts.dll available you have three options: copy
   the file to the Windows system directory, copy the file to the web
   server's directory, or add your PHP directory, C:\php to the PATH. For
   better maintenance, we advise you to follow the last option, add C:\php
   to the PATH, because it will be simpler to upgrade PHP in the future.
   Read more about how to add your PHP directory to PATH in the
   corresponding FAQ entry (and then don't forget to restart the computer
   - logoff isn't enough).

[ActiveScript]
   ActiveScript is a Windows only SAPI that enables you to use PHP script
   in any ActiveScript compliant host, like Windows Script Host,
   ASP/ASP.NET, Windows Script Components or Microsoft Scriptlet control.

   As of PHP 5.0.1, ActiveScript has been moved to the PECL repository.
   The DLL for this PECL extension may be downloaded from either the PHP
   Downloads page or from http://pecl4win.php.net/

     Note: You should read the manual installation steps first!

   After installing PHP, you should download the ActiveScript DLL
   (php5activescript.dll) and place it in the main PHP folder (e.g.
   C:\php).

   After having all the files needed, you must register the DLL on your
   system. To achieve this, open a Command Prompt window (located in the
   Start Menu). Then go to your PHP directory by typing something like cd
   C:\php. To register the DLL just type regsvr32 php5activescript.dll.
	 Note: you must regsvr32 php5activescript.dll
   To test if ActiveScript is working, create a new file, named test.wsf
   (the extension is very important) and type:
<job id="test">

 <script language="PHPScript">
  $WScript->Echo("Hello World!");
 </script>

</job>

   Save and double-click on the file. If you receive a little window
   saying "Hello World!" you're done.

     Note: In PHP 4, the engine was named 'ActivePHP', so if you are
     using PHP 4, you should replace 'PHPScript' with 'ActivePHP' in the
     above example.

     Note: ActiveScript doesn't use the default php.ini file. Instead, it
     will look only in the same directory as the .exe that caused it to
     load. You should create php-activescript.ini and place it in that
     folder, if you wish to load extensions, etc.

[PHP-IIS]
Microsoft IIS / PWS

   This section contains notes and hints specific to IIS (Microsoft
   Internet Information Server).

   Warning

   By using the CGI setup, your server is open to several possible
   attacks. Please read our CGI security section to learn how to defend
   yourself from those attacks.
     __________________________________________________________________

General considerations for all installations of PHP with IIS or PWS

     * First, read the Manual Installation Instructions. Do not skip this
       step as it provides crucial information for installing PHP on
       Windows.
     * CGI users must set the cgi.force_redirect PHP directive to 0 inside
       php.ini. Read the faq on cgi.force_redirect for important details.
       Also, CGI users may want to set the cgi.redirect_status_env
       directive. When using directives, be sure these directives aren't
       commented out inside php.ini.
     * The PHP 4 CGI is named php.exe while in PHP 5 it's php-cgi.exe. In
       PHP 5, php.exe is the CLI, and not the CGI.
     * Modify the Windows PATH environment variable to include the PHP
       directory. This way the PHP DLL files and PHP executables can all
       remain in the PHP directory without cluttering up the Windows
       system directory. For more details, see the FAQ on Setting the
       PATH.
     * The IIS user (usually IUSR_MACHINENAME) needs permission to read
       various files and directories, such as php.ini, docroot, and the
       session tmp directory.
     * Be sure the extension_dir and doc_root PHP directives are
       appropriately set in php.ini. These directives depend on the system
       that PHP is being installed on. In PHP 4, the extension_dir is
       extensions while with PHP 5 it's ext. So, an example PHP 5
       extensions_dir value is "c:\php\ext" and an example IIS doc_root
       value is "c:\Inetpub\wwwroot".
     * PHP extension DLL files, such as php_mysql.dll and php_curl.dll,
       are found in the zip package of the PHP download (not the PHP
       installer). In PHP 5, many extensions are part of PECL and can be
       downloaded in the "Collection of PECL modules" package. Files such
       as php_zip.dll and php_ssh2.dll. Download PHP files here.
     * When defining the executable, the 'check that file exists' box may
       also be checked. For a small performance penalty, the IIS (or PWS)
       will check that the script file exists and sort out authentication
       before firing up PHP. This means that the web server will provide
       sensible 404 style error messages instead of CGI errors complaining
       that PHP did not output any data.
     __________________________________________________________________

Windows NT/200x/XP and IIS 4 or newer

   PHP may be installed as a CGI binary, or with the ISAPI module. In
   either case, you need to start the Microsoft Management Console (may
   appear as 'Internet Services Manager', either in your Windows NT 4.0
   Option Pack branch or the Control Panel=>Administrative Tools under
   Windows 2000/XP). Then right click on your Web server node (this will
   most probably appear as 'Default Web Server'), and select 'Properties'.

   If you want to use the CGI binary, do the following:

     * Under 'Home Directory', 'Virtual Directory', or 'Directory', do the
       following:
     * Change the Execute Permissions to 'Scripts only'
     * Click on the 'Configuration' button, and choose the Application
       Mappings tab. Click Add and set the Executable path to the
       appropriate CGI file. An example PHP 5 value is: C:\php\php-cgi.exe
       Supply .php as the extension. Leave 'Method exclusions' blank, and
       check the 'Script engine' checkbox. Now, click OK a few times.
     * Set up the appropriate security. (This is done in Internet Service
       Manager), and if your NT Server uses NTFS file system, add execute
       rights for I_USR_ to the directory that contains php.exe /
       php-cgi.exe.

   To use the ISAPI module, do the following:

     * If you don't want to perform HTTP Authentication using PHP, you can
       (and should) skip this step. Under ISAPI Filters, add a new ISAPI
       filter. Use PHP as the filter name, and supply a path to the
       php4isapi.dll / php5isapi.dll.
     * Under 'Home Directory', 'Virtual Directory', or 'Directory', do the
       following:
     * Change the Execute Permissions to 'Scripts only'
     * Click on the 'Configuration' button, and choose the Application
       Mappings tab. Click Add and set the Executable path to the
       appropriate ISAPI DLL. An example PHP 5 value is:
       C:\php\php5isapi.dll Supply .php as the extension. Leave 'Method
       exclusions' blank, and check the 'Script engine' checkbox. Now,
       click OK a few times.
     * Stop IIS completely (NET STOP iisadmin)
     * Start IIS again (NET START w3svc)

   With IIS 6 (2003 Server), open up the IIS Manager, go to Web Service
   Extensions, choose "Add a new Web service extension", enter in a name
   such as PHP, choose the Add button and for the value browse to either
   the ISAPI file (php4isapi.dll or php5isapi.dll) or CGI (php.exe or
   php-cgi.exe) then check "Set extension status to Allowed" and click OK.

   In order to use index.php as a default content page, do the following:
   From within the Documents tab, choose Add. Type in index.php and click
   OK. Adjust the order by choosing Move Up or Move Down. This is similar
   to setting DirectoryIndex with Apache.

   The steps above must be repeated for each extension that is to be
   associated with PHP scripts. .php is the most common although .php3 may
   be required for legacy applications.

   If you experience 100% CPU usage after some time, turn off the IIS
   setting Cache ISAPI Application.
     __________________________________________________________________

Windows and PWS 4

   PWS 4 does not support ISAPI, only PHP CGI should be used.

     * Edit the enclosed pws-php4cgi.reg / pws-php5cgi.reg file (look into
       the SAPI folder for PHP 4, or in the main folder for PHP 5) to
       reflect the location of your php.exe / php-cgi.exe. Backslashes
       should be escaped, for example:
       [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\w3svc\paramet
       ers\Script Map] ".php"="C:\\php\\php.exe" (change to
       C:\\php\\php-cgi.exe if you are using PHP 5) Now merge this
       registery file into your system; you may do this by double-clicking
       it.
     * In the PWS Manager, right click on a given directory you want to
       add PHP support to, and select Properties. Check the 'Execute'
       checkbox, and confirm.
     __________________________________________________________________

Windows and PWS/IIS 3

   The recommended method for configuring these servers is to use the REG
   file included with the distribution (pws-php4cgi.reg in the SAPI folder
   for PHP 4, or pws-php5cgi.reg in the main folder for PHP 5). You may
   want to edit this file and make sure the extensions and PHP install
   directories match your configuration. Or you can follow the steps below
   to do it manually.

   Warning

   These steps involve working directly with the Windows registry. One
   error here can leave your system in an unstable state. We highly
   recommend that you back up your registry first. The PHP Development
   team will not be held responsible if you damage your registry.

     * Run Regedit.
     * Navigate to: HKEY_LOCAL_MACHINE /System /CurrentControlSet
       /Services /W3Svc /Parameters /ScriptMap.
     * On the edit menu select: New->String Value.
     * Type in the extension you wish to use for your php scripts. For
       example .php
     * Double click on the new string value and enter the path to php.exe
       in the value data field. ex: C:\php\php.exe "%s" %s for PHP 4, or
       C:\php\php-cgi.exe "%s" %s for PHP 5.
     * Repeat these steps for each extension you wish to associate with
       PHP scripts.

   The following steps do not affect the web server installation and only
   apply if you want your PHP scripts to be executed when they are run
   from the command line (ex. run C:\myscripts\test.php) or by double
   clicking on them in a directory viewer window. You may wish to skip
   these steps as you might prefer the PHP files to load into a text
   editor when you double click on them.

     * Navigate to: HKEY_CLASSES_ROOT
     * On the edit menu select: New->Key.
     * Name the key to the extension you setup in the previous section.
       ex: .php
     * Highlight the new key and in the right side pane, double click the
       "default value" and enter phpfile.
     * Repeat the last step for each extension you set up in the previous
       section.
     * Now create another New->Key under HKEY_CLASSES_ROOT and name it
       phpfile.
     * Highlight the new key phpfile and in the right side pane, double
       click the "default value" and enter PHP Script.
     * Right click on the phpfile key and select New->Key, name it Shell.
     * Right click on the Shell key and select New->Key, name it open.
     * Right click on the open key and select New->Key, name it command.
     * Highlight the new key command and in the right side pane, double
       click the "default value" and enter the path to php.exe. ex:
       c:\php\php.exe -q %1. (don't forget the %1).
     * Exit Regedit.
     * If using PWS on Windows, reboot to reload the registry.

   PWS and IIS 3 users now have a fully operational system. IIS 3 users
   can use a nifty tool from Steven Genusa to configure their script maps.

[PHP-Apache]
   !!!Warning
   We do not recommend using a threaded MPM in production with Apache2.
   Use the prefork MPM instead, or use Apache1. For information on why,
   read the related FAQ entry on using Apache2 with a threaded MPM
*version compatible
     These versions of PHP are compatible to Apache 2.0.40 and later.
     Apache 2.0 SAPI-support started with PHP 4.2.0. PHP 4.2.3 works with
     Apache 2.0.39, don't use any other version of Apache with PHP 4.2.3.
     However, the recommended setup is to use PHP 4.3.0 or later with the
     most recent version of Apache2.
     All mentioned versions of PHP will work still with Apache 1.3.x.
	   !!!Warning

	   Apache 2.0.x is designed to run on Windows NT 4.0, Windows 2000 or
	   Windows XP. At this time, support for Windows 9x is incomplete. Apache
	   2.0.x is not expected to work on those platforms at this time.

*integration of PHP and Apache.
   There are two ways to set up PHP to work with Apache 2.0.x on Windows.
   One is to use the CGI binary the other is to use the Apache module DLL.
   In either case you need to edit your httpd.conf to configure Apache to
   work with PHP and then restart the server.

     Note: Remember that when adding path values in the Apache
     configuration files on Windows, all backslashes such as
     c:\directory\file.ext must be converted to forward slashes, as
     c:/directory/file.ext. A trailing slash may also be necessary for
     directories.
	 
	*Installing as a CGI binary

	   You need to insert these three lines to your Apache httpd.conf
	   configuration file to set up the CGI binary:

	   Example 2-5. PHP and Apache 2.0 as CGI
		ScriptAlias /php/ "c:/php/"
		AddType application/x-httpd-php .php

		# For PHP 4
		Action application/x-httpd-php "/php/php.exe"

		# For PHP 5
		Action application/x-httpd-php "/php/php-cgi.exe"

		   !!!Warning

		   By using the CGI setup, your server is open to several possible
		   attacks. Please read our CGI security section to learn how to defend
		   yourself from those attacks.
	*Installing as an Apache module
	
	   You need to insert these two lines to your Apache httpd.conf
	   configuration file to set up the PHP module for Apache 2.0:

	   Example 2-6. PHP and Apache 2.0 as Module
			# For PHP 4 do something like this:
			LoadModule php4_module "c:/php/php4apache2.dll"
			# Don't forget to copy the php4apache2.dll file from the sapi directory!
			AddType application/x-httpd-php .php

			# For PHP 5 do something like this:
			LoadModule php5_module "c:/php/php5apache2.dll"
			AddType application/x-httpd-php .php

			# configure the path to php.ini
			PHPIniDir "C:/php"

		 Note: Remember to substitute your actual path to PHP for the c:/php/
		 in the above examples. Take care to use either php4apache2.dll or
		 php5apache2.dll in your LoadModule directive and not php4apache.dll
		 or php5apache.dll as the latter ones are designed to run with Apache
		 1.3.x.

		 Note: If you want to use content negotiation, read related FAQ.

	   Warning

	   Don't mix up your installation with DLL files from different PHP
	   versions. You have the only choice to use the DLL's and extensions that
	   ship with your downloaded PHP version.
[PHP-DLL]
Notice:mostly .dll in c:/php/ext/ directory,and DLLs for PHP extensions 
		are prefixed with php_.
*bulit in extensions
   Many extensions are built into the Windows version of PHP. This means
   additional DLL files, and the extension directive, are not used to load
   these extensions. The Windows PHP Extensions table lists extensions:
	   In PHP 4 (updated PHP 4.3.11): BCMath, Caledar, COM, Ctype, FTP, MySQL,
	   ODBC, Overload, PCRE, Session, Tokenizer, WDDX, XML and Zlib

	   In PHP 5 (updated PHP 5.0.4), the following changes exist. Built in:
	   DOM, LibXML, Iconv, SimpleXML, SPL and SQLite. And the following are no
	   longer built in: MySQL and Overload.
*load extensions
   You can choose which extensions you would like to load when PHP 
   starts by modifying your php.ini. You can also load a module dynamically 
   in your script using dl().
   Notice:some of the extensions may be need extra DLLS to work
		* Some of the extensions need extra DLLs to work. Couple of them can
		   be found in the distribution package, in the C:\php\dlls\ folder in
		   PHP 4 or in the main folder in PHP 5, but some, for example Oracle
		   (php_oci8.dll) require DLLs which are not bundled with the
		   distribution package. If you are installing PHP 4, copy the bundled
		   DLLs from C:\php\dlls folder to the main C:\php folder. Don't
		   forget to include C:\php in the system PATH (this process is
		   explained in a separate FAQ entry).
		 * Some of these DLLs are not bundled with the PHP distribution. See
		   each extensions documentation page for details. Also, read the
		   manual section titled Installation of PECL extensions for details
		   on PECL. An increasingly large number of PHP extensions are found
		   in PECL, and these extensions require a separate download.
*depend on other DLLS table list
   The following table describes some of the extensions available and
   required additional dlls.

   Table 2-1. PHP Extensions
   Extension Description Notes
   php_bz2.dll bzip2 compression functions None
   php_calendar.dll Calendar conversion functions Built in since PHP 4.0.3
   php_cpdf.dll ClibPDF functions None
   php_crack.dll Crack functions None
   php_ctype.dll ctype family functions Built in since PHP 4.3.0
   php_curl.dll CURL, Client URL library functions Requires: libeay32.dll,
   ssleay32.dll (bundled)
   php_cybercash.dll Cybercash payment functions PHP <= 4.2.0
   php_db.dll DBM functions Deprecated. Use DBA instead (php_dba.dll)
   php_dba.dll DBA: DataBase (dbm-style) Abstraction layer functions None
   php_dbase.dll dBase functions None
   php_dbx.dll dbx functions
   php_domxml.dll DOM XML functions PHP <= 4.2.0 requires: libxml2.dll
   (bundled) PHP >= 4.3.0 requires: iconv.dll (bundled)
   php_dotnet.dll .NET functions PHP <= 4.1.1
   php_exif.dll EXIF functions php_mbstring.dll. And, php_exif.dll must be
   loaded after php_mbstring.dll in php.ini.
   php_fbsql.dll FrontBase functions PHP <= 4.2.0
   php_fdf.dll FDF: Forms Data Format functions. Requires: fdftk.dll
   (bundled)
   php_filepro.dll filePro functions Read-only access
   php_ftp.dll FTP functions Built-in since PHP 4.0.3
   php_gd.dll GD library image functions Removed in PHP 4.3.2. Also note
   that truecolor functions are not available in GD1, instead, use
   php_gd2.dll.
   php_gd2.dll GD library image functions GD2
   php_gettext.dll Gettext functions PHP <= 4.2.0 requires gnu_gettext.dll
   (bundled), PHP >= 4.2.3 requires libintl-1.dll, iconv.dll (bundled).
   php_hyperwave.dll HyperWave functions None
   php_iconv.dll ICONV characterset conversion Requires: iconv-1.3.dll
   (bundled), PHP >=4.2.1 iconv.dll
   php_ifx.dll Informix functions Requires: Informix libraries
   php_iisfunc.dll IIS management functions None
   php_imap.dll IMAP POP3 and NNTP functions None
   php_ingres.dll Ingres II functions Requires: Ingres II libraries
   php_interbase.dll InterBase functions Requires: gds32.dll (bundled)
   php_java.dll Java functions PHP <= 4.0.6 requires: jvm.dll (bundled)
   php_ldap.dll LDAP functions PHP <= 4.2.0 requires libsasl.dll
   (bundled), PHP >= 4.3.0 requires libeay32.dll, ssleay32.dll (bundled)
   php_mbstring.dll Multi-Byte String functions None
   php_mcrypt.dll Mcrypt Encryption functions Requires: libmcrypt.dll
   php_mhash.dll Mhash functions PHP >= 4.3.0 requires: libmhash.dll
   (bundled)
   php_mime_magic.dll Mimetype functions Requires: magic.mime (bundled)
   php_ming.dll Ming functions for Flash None
   php_msql.dll mSQL functions Requires: msql.dll (bundled)
   php_mssql.dll MSSQL functions Requires: ntwdblib.dll (bundled)
   php_mysql.dll MySQL functions PHP >= 5.0.0, requires libmysql.dll
   (bundled)
   php_mysqli.dll MySQLi functions PHP >= 5.0.0, requires libmysql.dll
   (libmysqli.dll in PHP <= 5.0.2) (bundled)
   php_oci8.dll Oracle 8 functions Requires: Oracle 8.1+ client libraries
   php_openssl.dll OpenSSL functions Requires: libeay32.dll (bundled)
   php_oracle.dll Oracle functions Requires: Oracle 7 client libraries
   php_overload.dll Object overloading functions Built in since PHP 4.3.0
   php_pdf.dll PDF functions None
   php_pgsql.dll PostgreSQL functions None
   php_printer.dll Printer functions None
   php_shmop.dll Shared Memory functions None
   php_snmp.dll SNMP get and walk functions NT only!
   php_soap.dll SOAP functions PHP >= 5.0.0
   php_sockets.dll Socket functions None
   php_sybase_ct.dll Sybase functions Requires: Sybase client libraries
   php_tidy.dll Tidy functions PHP >= 5.0.0
   php_tokenizer.dll Tokenizer functions Built in since PHP 4.3.0
   php_w32api.dll W32api functions None
   php_xmlrpc.dll XML-RPC functions PHP >= 4.2.1 requires: iconv.dll
   (bundled)
   php_xslt.dll XSLT functions PHP <= 4.2.0 requires sablot.dll, expat.dll
   (bundled). PHP >= 4.2.1 requires sablot.dll, expat.dll, iconv.dll
   (bundled).
   php_yaz.dll YAZ functions Requires: yaz.dll (bundled)
   php_zip.dll Zip File functions Read only access
   php_zlib.dll ZLib compression functions Built in since PHP 4.3.0
[PHP-PECL]
Introduction to PECL Installations

   PECL is a repository of PHP extensions that are made available to you
   via the PEAR packaging system. This section of the manual is intended
   to demonstrate how to obtain and install PECL extensions.

   These instructions assume /your/phpsrcdir/ is the path to the PHP
   source distribution, and that extname is the name of the PECL
   extension. Adjust accordingly. These instructions also assume a
   familiarity with the pear command. The information in the PEAR manual
   for the pear command also applies to the pecl command.

   To be useful, a shared extension must be built, installed, and loaded.
   The methods described below provide you with various instructions on
   how to build and install the extensions, but they do not automatically
   load them. Extensions can be loaded by adding an extension directive.
   To this php.ini file, or through the use of the dl() function.

   When building PHP modules, it's important to have known-good versions
   of the required tools (autoconf, automake, libtool, etc.) See the
   SVN Instructions for details on the required tools, and required 
   versions.
     __________________________________________________________________

Downloading PECL extensions

   There are several options for downloading PECL extensions, such as:

     * http://pecl.php.net
       The PECL web site contains information about the different
       extensions that are offered by the PHP Development Team. The
       information available here includes: ChangeLog, release notes,
       requirements and other similar details.
     * pecl download extname
       PECL extensions that have releases listed on the PECL web site are
       available for download and installation using the pecl command.
       Specific revisions may also be specified.
     * SVN 
       Most PECL extensions also reside in SVN. A web-based view may be
       seen at http://svn.php.net/pecl/. To download straight from SVN,
       the following sequence of commands may be used. 

$ svn  co http://svn.php.net/repository/pecl/<extname>/trunk

     * Windows downloads
       Windows users may find compiled PECL binaries by downloading the
       Collection of PECL modules from the PHP Downloads page, or by
       retrieving a PECL Snapshot or an extension DLL on PECL4WIN. To
       compile PHP under Windows, read the appropriate chapter.
     __________________________________________________________________

PECL for Windows users

   As with any other PHP extension DLL, installation is as simple as
   copying the PECL extension DLLs into the extension_dir folder and
   loading them from php.ini. For example, add the following line to your
   php.ini:

   extension=php_extname.dll

   After doing this, restart the web server.
     __________________________________________________________________

Compiling shared PECL extensions with the pecl command

   PECL makes it easy to create shared PHP extensions. Using the pecl
   command, do the following:

   $ pecl install extname

   This will download the source for extname, compile, and install
   extname.so into your extension_dir. extname.so may then be loaded via
   php.ini

   By default, the pecl command will not install packages that are marked
   with the alpha or beta state. If no stable packages are available, you
   may install a beta package using the following command:

   $ pecl install extname-beta

   You may also install a specific version using this variant:

   $ pecl install extname-0.1
     __________________________________________________________________

Compiling shared PECL extensions with phpize

   Sometimes, using the pecl installer is not an option. This could be
   because you're behind a firewall, or it could be because the extension
   you want to install is not available as a PECL compatible package, such
   as unreleased extensions from SVN. If you need to build such an
   extension, you can use the lower-level build tools to perform the build
   manually.

   The phpize command is used to prepare the build environment for a PHP
   extension. In the following sample, the sources for an extension are in
   a directory named extname:

$ cd extname
$ phpize
$ ./configure
$ make
# make install

   A successful install will have created extname.so and put it into the
   PHP extensions directory. You'll need to and adjust php.ini and add an
   extension=extname.so line before you can use the extension.

   If the system is missing the phpize command, and precompiled packages
   (like RPM's) are used, be sure to also install the appropriate devel
   version of the PHP package as they often include the phpize command
   along with the appropriate header files to build PHP and its
   extensions.

   Execute phpize --help to display additional usage information.
     __________________________________________________________________

Compiling PECL extensions statically into PHP

   You might find that you need to build a PECL extension statically into
   your PHP binary. To do this, you'll need to place the extension source
   under the php-src/ext/ directory and tell the PHP build system to
   regenerate its configure script.

$ cd /your/phpsrcdir/ext
$ pecl download extname
$ gzip -d < extname.tgz | tar -xvf -
$ mv extname-x.x.x extname

   This will result in the following directory:

   /your/phpsrcdir/ext/extname

   From here, force PHP to rebuild the configure script, and then build
   PHP as normal:

$ cd /your/phpsrcdir
$ rm configure
$ ./buildconf --force
$ ./configure --help
$ ./configure --with-extname --enable-someotherext --with-foobar
$ make
$ make install

     Note: To run the 'buildconf' script you need autoconf 2.13 and
     automake 1.4+ (newer versions of autoconf may work, but are not
     supported).

   Whether --enable-extname or --with-extname is used depends on the
   extension. Typically an extension that does not require external
   libraries uses --enable. To be sure, run the following after buildconf:

   $ ./configure --help | grep extname
[PHP-Install-Problem]
Read the FAQ

   Some problems are more common than others. The most common ones are
   listed in the PHP FAQ, part of this manual.
     __________________________________________________________________

Other problems

   If you are still stuck, someone on the PHP installation mailing list
   may be able to help you. You should check out the archive first, in
   case someone already answered someone else who had the same problem as
   you. The archives are available from the support page on
   http://www.php.net/support.php. To subscribe to the PHP installation
   mailing list, send an empty mail to
   php-install-subscribe@lists.php.net. The mailing list address is
   php-install@lists.php.net.

   If you want to get help on the mailing list, please try to be precise
   and give the necessary details about your environment (which operating
   system, what PHP version, what web server, if you are running PHP as
   CGI or a server module, safe mode, etc...), and preferably enough code
   to make others able to reproduce and test your problem.
     __________________________________________________________________

Bug reports

   If you think you have found a bug in PHP, please report it. The PHP
   developers probably don't know about it, and unless you report it,
   chances are it won't be fixed. You can report bugs using the
   bug-tracking system at http://bugs.php.net/. Please do not send bug
   reports in mailing list or personal letters. The bug system is also
   suitable to submit feature requests.

   Read the How to report a bug document before submitting any bug
   reports!

[PHP-InI]
Notice:
   The configuration file (called php3.ini in PHP 3, and simply php.ini as
   of PHP 4) is read when PHP starts up. For the server module versions of
   PHP, this happens only once when the web server is started. For the CGI
   and CLI version, it happens on every invocation.
*php.ini location
      php.ini is searched in these locations (in order):

     * SAPI module specific location (PHPIniDir directive in Apache 2, -c
       command line option in CGI and CLI, php_ini parameter in NSAPI,
       PHP_INI_PATH environment variable in THTTPD)
     * The PHPRC environment variable. Before PHP 5.2.0 this was checked
       after the registry key mentioned below.
     * As of PHP 5.2.0, the following registry locations are searched in
       order: HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y.z\IniFilePath,
       HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y\IniFilePath and
       HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x\IniFilePath, where x, y and z
       mean the PHP major, minor and release versions.
     * HKEY_LOCAL_MACHINE\SOFTWARE\PHP\IniFilePath (Windows Registry
       location)
     * Current working directory (except CLI)
     * The web server's directory (for SAPI modules), or directory of PHP
       (otherwise in Windows)
     * Windows directory (C:\windows or C:\winnt) (for Windows), or
       --with-config-file-path compile time option

   If php-SAPI.ini exists (where SAPI is used SAPI, so the filename is
   e.g. php-cli.ini or php-apache.ini), it's used instead of php.ini. SAPI
   name can be determined by php_sapi_name().

     Note: The Apache web server changes the directory to root at startup
     causing PHP to attempt to read php.ini from the root filesystem if
     it exists.
*php.ini directive
	; any text on a line after an unquoted semicolon (;) is ignored
	[php] ; section markers (text within square brackets) are also ignored
	; Boolean values can be set to either:
	;    true, on, yes
	; or false, off, no, none
	; you can enclose strings in double-quotes
	include_path = ".:/usr/local/lib/php"

	; backslashes are treated the same as any other character
	include_path = ".;c:\php\lib"
	Notice:
	   Since PHP 5.1.0, it is possible to refer to existing .ini variables
	   from within .ini files. Example: open_basedir = ${open_basedir}
	   ":/new/dir".
*change php directives by another ways(not modifidy the file php.ini)
Running PHP as an Apache module

   When using PHP as an Apache module, you can also change the
   configuration settings using directives in Apache configuration files
   (e.g. httpd.conf) and .htaccess files. You will need "AllowOverride
   Options" or "AllowOverride All" privileges to do so.

   With PHP 4 and PHP 5, there are several Apache directives that allow
   you to change the PHP configuration from within the Apache
   configuration files. For a listing of which directives are PHP_INI_ALL,
   PHP_INI_PERDIR, or PHP_INI_SYSTEM, have a look at the List of php.ini
   directives appendix.

     Note: With PHP 3, there are Apache directives that correspond to
     each configuration setting in the php3.ini name, except the name is
     prefixed by "php3_".

   php_value name value
          Sets the value of the specified directive. Can be used only with
          PHP_INI_ALL and PHP_INI_PERDIR type directives. To clear a
          previously set value use none as the value.

     Note: Don't use php_value to set boolean values. php_flag (see
     below) should be used instead.

   php_flag name on|off
          Used to set a boolean configuration directive. Can be used only
          with PHP_INI_ALL and PHP_INI_PERDIR type directives.

   php_admin_value name value
          Sets the value of the specified directive. This can not be used
          in .htaccess files. Any directive type set with php_admin_value
          can not be overridden by .htaccess or virtualhost directives. To
          clear a previously set value use none as the value.

   php_admin_flag name on|off
          Used to set a boolean configuration directive. This can not be
          used in .htaccess files. Any directive type set with
          php_admin_flag can not be overridden by .htaccess or virtualhost
          directives.

   Example 5-2. Apache configuration example
<IfModule mod_php5.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag safe_mode on
</IfModule>
<IfModule mod_php4.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag safe_mode on
</IfModule>
<IfModule mod_php3.c>
  php3_include_path ".:/usr/local/lib/php"
  php3_safe_mode on
</IfModule>

   Caution

   PHP constants do not exist outside of PHP. For example, in httpd.conf
   you can not use PHP constants such as E_ALL or E_NOTICE to set the
   error_reporting directive as they will have no meaning and will
   evaluate to 0. Use the associated bitmask values instead. These
   constants can be used in php.ini
     __________________________________________________________________

Changing PHP configuration via the Windows registry

   When running PHP on Windows, the configuration values can be modified
   on a per-directory basis using the Windows registry. The configuration
   values are stored in the registry key HKLM\SOFTWARE\PHP\Per Directory
   Values, in the sub-keys corresponding to the path names. For example,
   configuration values for the directory c:\inetpub\wwwroot would be
   stored in the key HKLM\SOFTWARE\PHP\Per Directory
   Values\c\inetpub\wwwroot. The settings for the directory would be
   active for any script running from this directory or any subdirectory
   of it. The values under the key should have the name of the PHP
   configuration directive and the string value. PHP constants in the
   values are not parsed. However, only configuration values changeable in
   PHP_INI_USER can be set this way, PHP_INI_PERDIR values can not.
     __________________________________________________________________

Other interfaces to PHP

   Regardless of how you run PHP, you can change certain values at runtime
   of your scripts through ini_set(). See the documentation on the
   ini_set() page for more information.

   If you are interested in a complete list of configuration settings on
   your system with their current values, you can execute the phpinfo()
   function, and review the resulting page. You can also access the values
   of individual configuration directives at runtime using ini_get() or
   get_cfg_var().
     __________________________________________________________________
[FAQ]
@install@
   1. Why shouldn't I use Apache2 with a threaded MPM in a production
          environment?

   2. Unix/Windows: Where should my php.ini file be located?
   3. Unix: I installed PHP, but every time I load a document, I get the
          message 'Document Contains No Data'! What's going on here?

   4. Unix: I installed PHP using RPMS, but Apache isn't processing the
          PHP pages! What's going on here?

   5. Unix: I installed PHP 3 using RPMS, but it doesn't compile with the
          database support I need! What's going on here?

   6. Unix: I patched Apache with the FrontPage extensions patch, and
          suddenly PHP stopped working. Is PHP incompatible with the
          Apache FrontPage extensions?

   7. Unix/Windows: I have installed PHP, but when I try to access a PHP
          script file via my browser, I get a blank screen.

   8. Unix/Windows: I have installed PHP, but when try to access a PHP
          script file via my browser, I get a server 500 error.

   9. Some operating systems: I have installed PHP without errors, but
          when I try to start apache I get undefined symbol errors:

		[mybox:user /src/php4] root# apachectl configtest
		 apachectl: /usr/local/apache/bin/httpd Undefined symbols:
		  _compress
		  _uncompress

   10. Windows: I have installed PHP, but when I to access a PHP script
          file via my browser, I get the error:

		cgi error:
		 The specified CGI application misbehaved by not
		 returning a complete set of HTTP headers.
		 The headers it did return are:

   11. Windows: I've followed all the instructions, but still can't get
          PHP and IIS to work together!

   12. When running PHP as CGI with IIS, PWS, OmniHTTPD or Xitami, I get
          the following error: Security Alert! PHP CGI cannot be accessed
          directly..

   13. How do I know if my php.ini is being found and read? It seems like
          it isn't as my changes aren't being implemented.

   14. How do I add my PHP directory to the PATH on Windows?
   15. How do I make the php.ini file available to PHP on windows?
   16. Is it possible to use Apache content negotiation (MultiViews
          option) with PHP?

   17. Is PHP limited to process GET and POST request methods only?

   1. Why shouldn't I use Apache2 with a threaded MPM in a production
   environment?

   PHP is glue. It is the glue used to build cool web applications by
   sticking dozens of 3rd-party libraries together and making it all
   appear as one coherent entity through an intuitive and easy to learn
   language interface. The flexibility and power of PHP relies on the
   stability and robustness of the underlying platform. It needs a working
   OS, a working web server and working 3rd-party libraries to glue
   together. When any of these stop working PHP needs ways to identify the
   problems and fix them quickly. When you make the underlying framework
   more complex by not having completely separate execution threads,
   completely separate memory segments and a strong sandbox for each
   request to play in, feet of clay are introduced into PHP's system.

   If you feel you have to use a threaded MPM, look at a FastCGI
   configuration where PHP is running in its own memory space.

   And finally, this warning against using a threaded MPM is not as strong
   for Windows systems because most libraries on that platform tend to be
   threadsafe.

   2. Unix/Windows: Where should my php.ini file be located?

   By default on Unix it should be in /usr/local/lib which is
   <install-path>/lib. Most people will want to change this at
   compile-time with the --with-config-file-path flag. You would, for
   example, set it with something like:
   --with-config-file-path=/etc

   And then you would copy php.ini-dist from the distribution to
   /etc/php.ini and edit it to make any local changes you want.
   --with-config-file-scan-dir=PATH

   On Windows the default path for the php.ini file is the Windows
   directory. If you're using the Apache webserver, php.ini is first
   searched in the Apaches install directory, e.g. c:\program files\apache
   group\apache. This way you can have different php.ini files for
   different versions of Apache on the same machine.

   See also the chapter about the configuration file.

   3. Unix: I installed PHP, but every time I load a document, I get the
   message 'Document Contains No Data'! What's going on here?

   This probably means that PHP is having some sort of problem and is
   core-dumping. Look in your server error log to see if this is the case,
   and then try to reproduce the problem with a small test case. If you
   know how to use 'gdb', it is very helpful when you can provide a
   backtrace with your bug report to help the developers pinpoint the
   problem. If you are using PHP as an Apache module try something like:

     * Stop your httpd processes
     * gdb httpd
     * Stop your httpd processes
     * > run -X -f /path/to/httpd.conf
     * Then fetch the URL causing the problem with your browser
     * > run -X -f /path/to/httpd.conf
     * If you are getting a core dump, gdb should inform you of this now
     * type: bt
     * You should include your backtrace in your bug report. This should
       be submitted to http://bugs.php.net/

   If your script uses the regular expression functions (ereg() and
   friends), you should make sure that you compiled PHP and Apache with
   the same regular expression package. This should happen automatically
   with PHP and Apache 1.3.x

   4. Unix: I installed PHP using RPMS, but Apache isn't processing the
   PHP pages! What's going on here?

   Assuming you installed both Apache and PHP from RPM packages, you need
   to uncomment or add some or all of the following lines in your
   httpd.conf file:
# Extra Modules
AddModule mod_php.c
AddModule mod_php3.c
AddModule mod_perl.c

# Extra Modules
LoadModule php_module         modules/mod_php.so
LoadModule php3_module        modules/libphp3.so     # for PHP 3
LoadModule php4_module        modules/libphp4.so     # for PHP 4
LoadModule perl_module        modules/libperl.so

   And add:
AddType application/x-httpd-php3 .php3    # for PHP 3
AddType application/x-httpd-php .php      # for PHP 4

   ... to the global properties, or to the properties of the VirtualDomain
   you want to have PHP support added to.

   5. Unix: I installed PHP 3 using RPMS, but it doesn't compile with the
   database support I need! What's going on here?

   Due to the way PHP 3 built, it is not easy to build a complete flexible
   PHP RPM. This issue is addressed in PHP 4. For PHP 3, we currently
   suggest you use the mechanism described in the INSTALL.REDHAT file in
   the PHP distribution. If you insist on using an RPM version of PHP 3,
   read on...

   The RPM packagers are setting up the RPMS to install without database
   support to simplify installations and because RPMS use /usr/ instead of
   the standard /usr/local/ directory for files. You need to tell the RPM
   spec file which databases to support and the location of the top-level
   of your database server.

   This example will explain the process of adding support for the popular
   MySQL database server, using the mod installation for Apache.

   Of course all of this information can be adjusted for any database
   server that PHP supports. We will assume you installed MySQL and Apache
   completely with RPMS for this example as well.

     * First remove mod_php3 :

rpm -e mod_php3

     * Then get the source rpm and INSTALL it, NOT --rebuild

rpm -Uvh mod_php3-3.0.5-2.src.rpm

     * Then edit the /usr/src/redhat/SPECS/mod_php3.spec file
       In the %build section add the database support you want, and the
       path.
       For MySQL you would add --with-mysql=/usr The %build section will
       look something like this:

./configure --prefix=/usr \
--with-apxs=/usr/sbin/apxs \
--with-config-file-path=/usr/lib \
--enable-debug=no \
--enable-safe-mode \
--with-exec-dir=/usr/bin \
--with-mysql=/usr \
--with-system-regex

     * Once this modification is made then build the binary rpm as
       follows:

rpm -bb /usr/src/redhat/SPECS/mod_php3.spec

     * Then install the rpm

rpm -ivh /usr/src/redhat/RPMS/i386/mod_php3-3.0.5-2.i386.rpm

   Make sure you restart Apache, and you now have PHP 3 with MySQL support
   using RPM's. Note that it is probably much easier to just build from
   the distribution tarball of PHP 3 and follow the instructions in
   INSTALL.REDHAT found in that distribution.

   6. Unix: I patched Apache with the FrontPage extensions patch, and
   suddenly PHP stopped working. Is PHP incompatible with the Apache
   FrontPage extensions?

   No, PHP works fine with the FrontPage extensions. The problem is that
   the FrontPage patch modifies several Apache structures, that PHP relies
   on. Recompiling PHP (using 'make clean ; make') after the FP patch is
   applied would solve the problem.

   7. Unix/Windows: I have installed PHP, but when I try to access a PHP
   script file via my browser, I get a blank screen.

   Do a 'view source' in the web browser and you will probably find that
   you can see the source code of your PHP script. This means that the web
   server did not send the script to PHP for interpretation. Something is
   wrong with the server configuration - double check the server
   configuration against the PHP installation instructions.

   8. Unix/Windows: I have installed PHP, but when try to access a PHP
   script file via my browser, I get a server 500 error.

   Something went wrong when the server tried to run PHP. To get to see a
   sensible error message, from the command line, change to the directory
   containing the PHP executable (php.exe on Windows) and run php -i. If
   PHP has any problems running, then a suitable error message will be
   displayed which will give you a clue as to what needs to be done next.
   If you get a screen full of HTML codes (the output of the phpinfo()
   function) then PHP is working, and your problem may be related to your
   server configuration which you should double check.

   9. Some operating systems: I have installed PHP without errors, but
   when I try to start apache I get undefined symbol errors:
[mybox:user /src/php4] root# apachectl configtest
 apachectl: /usr/local/apache/bin/httpd Undefined symbols:
  _compress
  _uncompress

   This has actually nothing to do with PHP, but with the MySQL client
   libraries. Some need --with-zlib, others do not. This is also covered
   in the MySQL FAQ.

   10. Windows: I have installed PHP, but when I to access a PHP script
   file via my browser, I get the error:
cgi error:
 The specified CGI application misbehaved by not
 returning a complete set of HTTP headers.
 The headers it did return are:

   This error message means that PHP failed to output anything at all. To
   get to see a sensible error message, from the command line, change to
   the directory containing the PHP executable (php.exe on Windows) and
   run php -i. If PHP has any problems running, then a suitable error
   message will be displayed which will give you a clue as to what needs
   to be done next. If you get a screen full of HTML codes (the output of
   the phpinfo() function) then PHP is working.

   Once PHP is working at the command line, try accessing the script via
   the browser again. If it still fails then it could be one of the
   following:

     * File permissions on your PHP script, php.exe, php4ts.dll, php.ini
       or any PHP extensions you are trying to load are such that the
       anonymous internet user ISUR_<machinename> cannot access them.
     * The script file does not exist (or possibly isn't where you think
       it is relative to your web root directory). Note that for IIS you
       can trap this error by ticking the 'check file exists' box when
       setting up the script mappings in the Internet Services Manager. If
       a script file does not exist then the server will return a 404
       error instead. There is also the additional benefit that IIS will
       do any authentication required for you based on the NTLanMan
       permissions on your script file.

   11. Windows: I've followed all the instructions, but still can't get
   PHP and IIS to work together!

   Make sure any user who needs to run a PHP script has the rights to run
   php.exe! IIS uses an anonymous user which is added at the time IIS is
   installed. This user needs rights to php.exe. Also, any authenticated
   user will also need rights to execute php.exe. And for IIS4 you need to
   tell it that PHP is a script engine. Also, you will want to read this
   faq.

   12. When running PHP as CGI with IIS, PWS, OmniHTTPD or Xitami, I get
   the following error: Security Alert! PHP CGI cannot be accessed
   directly..

   You must set the cgi.force_redirect directive to 0. It defaults to 1 so
   be sure the directive isn't commented out (with a ;). Like all
   directives, this is set in php.ini

   Because the default is 1, it's critical that you're 100% sure that the
   correct php.ini file is being read. Read this faq for details.

   13. How do I know if my php.ini is being found and read? It seems like
   it isn't as my changes aren't being implemented.

   To be sure your php.ini is being read by PHP, make a call to phpinfo()
   and near the top will be a listing called Configuration File (php.ini).
   This will tell you where PHP is looking for php.ini and whether or not
   it's being read. If just a directory PATH exists than it's not being
   read and you should put your php.ini in that directory. If php.ini is
   included within the PATH than it is being read.

   If php.ini is being read and you're running PHP as a module, then be
   sure to restart your web server after making changes to php.ini

   14. How do I add my PHP directory to the PATH on Windows?

   On Windows NT, 2000, XP and 2003:

     * Go to Control Panel and open the System icon (Start -> Settings ->
       Control Panel -> System, or just Start -> Control Panel -> System
       for Windows XP/2003)
     * Go to the Advanced tab
     * Click on the 'Environment Variables' button
     * Look into the 'System Variables' pane
     * Find the Path entry (you may need to scroll to find it)
     * Double click on the Path entry
     * Enter your PHP directory at the end, including ';' before (e.g.
       ;C:\php)
     * Press OK and restart your computer

   On Windows 98/Me you need to edit the autoexec.bat file:

     * Open the Notepad (Start -> Run and enter notepad)
     * Open the C:\autoexec.bat file
     * Locate the line with PATH=C:\WINDOWS;C:\WINDOWS\COMMAND;..... and
       add: ;C:\php to the end of the line
     * Save the file and restart your computer

     Note: Be sure to reboot after following the steps above to ensure
     that the PATH changes are applied.

   The PHP manual used to promote the copying of files into the Windows
   system directory, this is because this directory (C:\Windows, C:\WINNT,
   etc.) is by default in the systems PATH. Copying files into the Windows
   system directory has long since been deprecated and may cause problems.

   15. How do I make the php.ini file available to PHP on windows?

   There are several ways of doing this. If you are using Apache, read
   their installation specific instructions (Apache 1, Apache 2),
   otherwise you must set the PHPRC environment variable:

   On Windows NT, 2000, XP and 2003:

     * Go to Control Panel and open the System icon (Start -> Settings ->
       Control Panel -> System, or just Start -> Control Panel -> System
       for Windows XP/2003)
     * Go to the Advanced tab
     * Click on the 'Environment Variables' button
     * Look into the 'System variables' pane
     * Click on 'New' and enter 'PHPRC' as the variable name and the
       directory where php.ini is located as the variable value (e.g.
       C:\php)
     * Press OK and restart your computer

   On Windows 98/Me you need to edit the autoexec.bat file:

     * Open the Notepad (Start -> Run and enter notepad)
     * Open the C:\autoexec.bat file
     * Add a new line to the end of the file: set PHPRC=C:\php (replace
       C:\php with the directory where php.ini is located). Please note
       that the path cannot contain spaces. For instance, if you have
       installed PHP in C:\Program Files\PHP, you would enter
       C:\PROGRA~1\PHP instead.
     * Save the file and restart your computer

   16. Is it possible to use Apache content negotiation (MultiViews
   option) with PHP?

   If links to PHP files include extension, everything works perfect. This
   FAQ is only for the case when links to PHP files don't include
   extension and you want to use content negotiation to choose PHP files
   from URL with no extension. In this case, replace the line AddType
   application/x-httpd-php .php with:
# PHP 4
AddHandler php-script php
AddType text/html php

# PHP 5
AddHandler php5-script php
AddType text/html php

   This solution doesn't work for Apache 1 as PHP module doesn't catch
   php-script.

   17. Is PHP limited to process GET and POST request methods only?

   No, it is possible to handle any request method, e.g. CONNECT. Proper
   response status can be sent with header(). If only GET and POST methods
   should be handled, it can be achieved with this Apache configuration:
<LimitExcept GET POST>
Deny from all
</LimitExcept>

   

