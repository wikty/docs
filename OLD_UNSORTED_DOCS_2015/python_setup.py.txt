Please look up docs.python.org for more detials

what setup.py using for?
For What:
	Although Python’s extensive standard library covers many programming needs, there often 
	comes a time when you need to add some new functionality to your Python installation in the 
	form of third-party modules. This might be necessary to support your own programming, or to 
	support an application that you want to use and that happens to be written in Python.
	just a words, you need to install third-party Python modules
The Way Of Installer:
	In the best case, someone will 
	have prepared a special version of the module distribution you want to install that is 
	targeted specifically at your platform and is installed just like any other software on your 
	platform. For example, the module developer might make an executable installer available for 
	Windows users, an RPM package for users of RPM-based Linux systems (Red Hat, SuSE, Mandrake, 
	and many others), a Debian package for users of Debian-based Linux systems, and so forth.
	In that case, you would download the installer appropriate to your platform and do the 
	obvious thing with it: run it if it’s an executable installer, rpm --install it if it’s an 
	RPM, etc. You don’t need to run Python or a setup script, you don’t need to compile 
	anything—you might not even need to read any instructions (although it’s always a good idea 
	to do so anyway).
	Of course, things will not always be that easy. You might be interested in a module 
	distribution that doesn’t have an easy-to-use installer for your platform. In that case, 
	you’ll have to start with the source distribution released by the module’s author/maintainer.
	 Installing from a source distribution is not too hard, as long as the modules are packaged 
	 in the standard way. The bulk of this document is about building and installing modules 
	 from standard source distributions.
The Way Of Distutils:
	If you download a module source distribution, you can tell pretty quickly if it was 
	packaged and distributed in the standard way, i.e. using the Distutils. First, the 
	distribution’s name and version number will be featured prominently in the name of the 
	downloaded archive, e.g. foo-1.0.tar.gz or widget-0.9.7.zip. Next, you should unpack 
	those into a similarly-named directory: foo-1.0 or widget-0.9.7. in those folder will 
	contain a setup script setup.py, and a file named README.txt or possibly just README, 
	which should explain that building and installing the module distribution is a simple 
	matter of running one command from a terminal:
		python setup.py install
	For Windows, this command should be run from a command prompt window (Start Accessories):
		setup.py install
	If all these things are true, then you already know how to build and install the modules 
	you’ve just downloaded: Run the command above. Unless you need to install things in a non
	-standard way or customize the build process, you don’t really need this manual. Or 
	rather, the above command is everything you need to get out of this manual.

How does setup.py work?
Build and Install:
	Running setup.py install builds and installs all modules
	Build:
		As implied above, the build command is responsible for putting the files to install into a build directory. By default, this is build under the distribution root; if you’re excessively concerned with speed, or want to keep the source tree pristine, you can change the build directory with the --build-base option. For example:
		python setup.py build --build-base=/path/to/pybuild/foo-1.0
		(Or you could do this permanently with a directive in your system or personal Distutils configuration file; see section Distutils Configuration Files.) Normally, this isn’t necessary.
		The default layout for the build tree is as follows:

		--- build/ --- lib/
		or
		--- build/ --- lib.<plat>/
		               temp.<plat>/
		where <plat> expands to a brief description of the current OS/hardware platform and Python version. The first form, with just a lib directory, is used for “pure module distributions”—that is, module distributions that include only pure Python modules. If a module distribution contains any extensions (modules written in C/C++), then the second form, with two <plat> directories, is used. In that case, the temp.plat directory holds temporary files generated by the compile/link process that don’t actually get installed. In either case, the lib (or lib.plat) directory contains all Python modules (pure Python and extensions) that will be installed.
		In the future, more directories will be added to handle Python scripts, documentation, binary executables, and whatever else is needed to handle the job of installing Python modules and applications.
	Install:
		After the build command runs (whether you run it explicitly, or the install command does it for you), the work of the install command is relatively simple: all it has to do is copy everything under build/lib (or build/lib.plat) to your chosen installation directory.

		If you don’t choose an installation directory—i.e., if you just run setup.py install—then the install command installs to the standard location for third-party Python modules. This location varies by platform and by how you built/installed Python itself. On Unix (and Mac OS X, which is also Unix-based), it also depends on whether the module distribution being installed is pure Python or contains extensions (“non-pure”):

		Platform	Standard installation location	Default value	Notes
		Unix (pure)	prefix/lib/pythonX.Y/site-packages	/usr/local/lib/pythonX.Y/site-packages	(1)
		Unix (non-pure)	exec-prefix/lib/pythonX.Y/site-packages	/usr/local/lib/pythonX.Y/site-packages	(1)
		Windows	prefix\Lib\site-packages	C:\PythonXY\Lib\site-packages	(2)
		Notes:

		Most Linux distributions include Python as a standard part of the system, so prefix and exec-prefix are usually both /usr on Linux. If you build Python yourself on Linux (or any Unix-like system), the default prefix and exec-prefix are /usr/local.
		The default installation directory on Windows was C:\Program Files\Python under Python 1.6a1, 1.5.2, and earlier.
		prefix and exec-prefix stand for the directories that Python is installed to, and where it finds its libraries at run-time. They are always the same under Windows, and very often the same under Unix and Mac OS X. You can find out what your Python installation uses for prefix and exec-prefix by running Python in interactive mode and typing a few simple commands. Under Unix, just type python at the shell prompt. Under Windows, choose Start ‣ Programs ‣ Python X.Y ‣ Python (command line). Once the interpreter is started, you type Python code at the prompt. For example, on my Linux system, I type the three Python statements shown below, and get the output as shown, to find out my prefix and exec-prefix:

		Python 2.4 (#26, Aug  7 2004, 17:19:02)
		Type "help", "copyright", "credits" or "license" for more information.
		>>> import sys
		>>> sys.prefix
		'/usr'
		>>> sys.exec_prefix
		'/usr'
		A few other placeholders are used in this document: X.Y stands for the version of Python, for example 2.7; distname will be replaced by the name of the module distribution being installed. Dots and capitalization are important in the paths; for example, a value that uses python2.7 on UNIX will typically use Python27 on Windows.

		If you don’t want to install modules to the standard location, or if you don’t have permission to write there, then you need to read about alternate installations in section Alternate Installation. If you want to customize your installation directories more heavily, see section Custom Installation on custom installations.
Install local directory:
	Often, it is necessary or desirable to install modules to a location other than the standard location for third-party Python modules. For example, on a Unix system you might not have permission to write to the standard third-party module directory. Or you might wish to try out a module before making it a standard part of your local Python installation. This is especially true when upgrading a distribution already present: you want to make sure your existing base of scripts still works with the new version before actually upgrading.
	The Distutils install command is designed to make installing module distributions to an alternate location simple and painless. The basic idea is that you supply a base directory for the installation, and the install command picks a set of directories (called an installation scheme) under this base directory in which to install files. The details differ across platforms, so read whichever of the following sections applies to you.
	Note that the various alternate installation schemes are mutually exclusive: you can pass --user, or --home, or --prefix and --exec-prefix, or --install-base and --install-platbase, but you can’t mix from these groups.
	--user
		

Split Build and Install:
	Running setup.py install builds and installs all modules in one run. If you prefer to work 
	incrementally—especially useful if you want to customize the build process, or if things are 
	going wrong—you can use the setup script to do one thing at a time. This is particularly 
	helpful when the build and install will be done by different users—for example, you might 
	want to build a module distribution and hand it off to a system administrator for 
	installation (or do it yourself, with super-user privileges).
	For example, you can build everything in one step, and then install everything in a second step, by invoking the setup script twice:
	python setup.py build
	python setup.py install



How to uninstall a packages?
	# record install detials
	python setup.py install --record install.log
	# remove the packbage
	cat install.log | xargs rm -rf

